using System;
using Data_Structure_And_Algorithms;

namespace Formal_Languages_And_Automata
{
    public class RegularLanguages_And_Regular_Grammars
    {
        //public enum Regular Expressions Properties {dfa and nfa representation of regular languages are usful in intances e.g. when we want to show the logic by which we decide if a string is in a language but in many instances we need more concise ways of describibng regular languages one way of describing regular languages involving combination of strings of symbols from some alphabet Zigma,parentheses and the operators "+" for union "." for concatenation "*" for star closure,>>>>we construct regular expressions from primitive constituents by reprated appplying certain recursive rules let Zigma be a given alphabet then (1) emptyset,lambda,a in Zigma are all regular expressions which are called primitive regular expressions(2)if r1 and r2 are regular expressions so are r1 + r2 and r1.r2 and (r1)* and (r1) (3)a string is a regular expression if and only if it can be derived from the primitive regular expressoins by a finite number of applications of the rules in (2),>>>> regular expressions can be used to describe some simple languages if r is a regular expression we say L(r) is language associated with r so language L(r) denoted by any regular expression r is defined by following rules:(1) emptyset is a regular expression denoting the empty set (2) lambda is a regular expression denoting lambda is a set (3) for every a in Zigma,a is a regular expressiopn denoting {a}  if r1 and r2 are regular expressions (4) L(r1 + r2) = L(r1) union L(r2) (5) L(r1.r2) = L(r1).L(r2) (6) L((r1))= L(r1) (7)L(r*)= (L(r1))*  for regular expression last four are used to reduce L to simpler components recursively and the first three are the termination conditions for this recursion to see language of an expression we apply these rules repeatedly,>>>>to avoid ambiguity in breaking complicated expressions into parts we can use fully parenthesized expressions but its cumber some so a set of precedence rules for evluation is established in which star closure precedes concatenation and concatenation precedes union,>>>> two regular expressions are equivalent if they denote the same language,>>>> emptyset satr equals to Lambda,>>>> a point emptyset equals emptyset,>>>> r1 star star equals to r1 star,>>>> r1 star point r1 plus r2 both star equals to r1 plus r2 both star,>>>> r1 plus r2 both star equals to r1 star point r2 star both star,>>>>regular expressions are an important notation for specifying lexeme patterns while they ant express all possible patterns they are very effective in specifying those types of patterns we actually needs for tokens };
        //public enum Regular Grammer Properties { in right linear grammers all of its productions are of the form A to xB and A to x,>>>>in left linear grammers all of its productions are of the form A to Bx and A to x,>>>>a regular grammer is one that is either right linear or left linear,>>>>in a regular grammer at most one variable appears on the right side of any production furthermore that variable must consistently be either the rightmost or left most symbol of the right side of any production,>>>>linear grammer is a grammer in which at most one variable can occur on the right side of any production without restriction on the position of this variable,>>>>nfas dfas regular expressions and regular grammars are all equally powerful,>>>>we know that the sentential forms of a rightmost grammar have special form that that there is exactly one variable and it occurs as rightmost symbol so we have for derivation ab…cD->ab…cdE production D->dE so in corresponding nfa to imitate it we go from state D to state E when symbol d is encountered so state of automaton is variable in sentential form and part of string already processed is terminal prefix of sentential form this idea is the basis for following theorem to show that language generated by a right linear grammar is regular Theorem: let G=(V,T,S,P) be a right-linear grammar then L(G) is a regular language to prove theorem if w in L(G) then nfa has path from V0 to Vi labled v1 from Vi to Vj labeled v2 so Vf in zigma*(V0,w) and w is accepted by M conversely if w is accepted by M then automaton has to pass through a sequence of states V0,Vi,…,to Vf using paths labeled v1,v2,… so w must have form w=v1v2…vkvl and the derivation V0->v1Vi->v1v2Vj-*>v1v2…vkVk->v1v2…vkvl is possible so w is in L(G) and theorem is proved and to show that every regular language can be generated by some right linear grammar  we have Theorem:if L is a regular language then there exists a right-linear grammar G=(V,Zigma,S,P) such that L=L(G) to prove it first we show that G defined in this way can generate every string in L consider w in L of form w=aiaj…akal for M to accept this string it must make moves via zigma(q0,ai)=qp,zigma(qp,aj)=qr,…,zigma(qs,ak)=qt,zigma(qt,al)=qf in F since grammar have one production for each zigma`s we make derivation q0->aiqp->aiajqr-*>aiaj…akqt->aiaj…akalqf->aiaj…akal  (1) with grammar G and w in L(G)  conversely if w in L(G) then its derivation must have form  that is (1)zigma*(q0,aiaj…akal)=qf impling zigma*(q0,aiaj…akal)=qf completing the proof in this theorem we can use nfa instead of dfa with minor modifications};
    }
    public enum Regular_Expression_Operator {Alphabet,Star,Plus,Point };
    //public class Regular_Expression : IComparable
    //{
    //    public Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> Regular_Expression_Body = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>>();
    //    public Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Rex_Transition_Graph = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //    public bool Nullable = false;
    //    public Circular_Doubly_Linked_List<int> Firstpos = new Circular_Doubly_Linked_List<int>(), Lastpos = new Circular_Doubly_Linked_List<int>(), Followpos = new Circular_Doubly_Linked_List<int>();
    //    public Regular_Expression_Operator Operator;
    //    public System.String Alphabet = null;
    //    public Graph<System.String> Transition_Graph = null;
    //    public Regular_Expression()
    //    {

    //    }
    //    public void Insert_Node(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Last_Inserted_Node, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Last_Inserted_Graph_Node, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Next_Inserted_Node, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Next_Inserted_Graph_Node, Regular_Expression_Operator Rex_Operator, System.String Alphabet, bool Is_Inserted_to_Right_Subtree)
    //    {
    //        Key_Value_Pair<Regular_Expression_Operator, System.String> KV = new Key_Value_Pair<Regular_Expression_Operator, string>(Rex_Operator, Alphabet);

    //        if (Regular_Expression_Body.root == null)
    //        {
    //            //Rex_Transition_Graph.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,Graph<System.String>>>();
    //            //Regular_Expression_Body.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
    //            //Regular_Expression_Body.root.key = KV;
    //            //Next_Inserted_Node=Regular_Expression_Body.root;
    //            //Next_Inserted_Graph_Node = Rex_Transition_Graph.root;
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //            Next_Inserted_Node.key = KV;
    //            Next_Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
    //            Regular_Expression_Body.InsertLeft(Last_Inserted_Node, Next_Inserted_Node);
    //            Rex_Transition_Graph.InsertRight(Last_Inserted_Graph_Node, Next_Inserted_Graph_Node);
    //            //Regular_Expression_Body = Last_Inserted_Node;
    //            //Rex_Transition_Graph = Last_Inserted_Graph_Node;
    //            //Next_Inserted_Node =Inserting_Node;
    //            //Next_Inserted_Graph_Node = Inserting_Graph_Node;
    //        }
    //        else if (Is_Inserted_to_Right_Subtree)
    //        {
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,string>>();
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //            Next_Inserted_Node.key = KV;
    //            Next_Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
    //            Regular_Expression_Body.InsertRight(Last_Inserted_Node, Next_Inserted_Node);
    //            Rex_Transition_Graph.InsertRight(Last_Inserted_Graph_Node, Next_Inserted_Graph_Node);
    //            //Next_Inserted_Node = Inserting_Node;
    //            //Next_Inserted_Graph_Node = Inserting_Graph_Node;
    //            //while (Inserting_Node.p != null)
    //            //    Inserting_Node = Inserting_Node.p;
    //            //Regular_Expression_Body = Inserting_Node;
    //        }
    //        else
    //        {
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //            Next_Inserted_Node.key = KV;
    //            Next_Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
    //            Regular_Expression_Body.InsertLeft(Last_Inserted_Node, Next_Inserted_Node);
    //            Rex_Transition_Graph.InsertLeft(Last_Inserted_Graph_Node, Next_Inserted_Graph_Node);
    //            //Next_Inserted_Node = Inserting_Node;
    //            //Next_Inserted_Graph_Node = Inserting_Graph_Node;
    //            //while (Inserting_Node.p != null)
    //            //    Inserting_Node = Inserting_Node.p;
    //            //Regular_Expression_Body = Inserting_Node;
    //        }
    //    }
    //    public void Insert_Regular_Expression(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Last_Inserted_Node, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Last_Inserted_Graph_Node, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserted_Node, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserted_Graph_Node, bool Is_Inserted_to_Right_Subtree)
    //    {
    //        //Key_Value_Pair<Regular_Expression_Operator, System.String> KV = new Key_Value_Pair<Regular_Expression_Operator, string>(Rex_Operator, Alphabet);

    //        if (Regular_Expression_Body.root == null)
    //        {
    //            //Rex_Transition_Graph.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,Graph<System.String>>>();
    //            //Regular_Expression_Body.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,string>>();
    //            //Regular_Expression_Body.root.key = KV;
    //            //Next_Inserted_Node=Regular_Expression_Body.root;
    //            //Next_Inserted_Graph_Node = Rex_Transition_Graph.root;
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //            //Inserted_Node.key = KV;
    //            //Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
    //            Regular_Expression_Body.Insert_SubTree_Left(Last_Inserted_Node, Inserted_Node.root);
    //            Rex_Transition_Graph.Insert_SubTree_Left(Last_Inserted_Graph_Node, Inserted_Graph_Node.root);
    //            //Regular_Expression_Body = Last_Inserted_Node;
    //            //Rex_Transition_Graph = Last_Inserted_Graph_Node;
    //            //Next_Inserted_Node =Inserting_Node;
    //            //Next_Inserted_Graph_Node = Inserting_Graph_Node;
    //        }
    //        else if (Is_Inserted_to_Right_Subtree)
    //        {
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,string>>();
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //            //Inserted_Node.key = KV;
    //            //Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
    //            Regular_Expression_Body.Insert_SubTree_Right(Last_Inserted_Node, Inserted_Node.root);
    //            Rex_Transition_Graph.Insert_SubTree_Right(Last_Inserted_Graph_Node, Inserted_Graph_Node.root);
    //            //Next_Inserted_Node = Inserting_Node;
    //            //Next_Inserted_Graph_Node = Inserting_Graph_Node;
    //            //while (Inserting_Node.p != null)
    //            //    Inserting_Node = Inserting_Node.p;
    //            //Regular_Expression_Body = Inserting_Node;
    //        }
    //        else
    //        {
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
    //            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
    //            //Inserted_Node.key = KV;
    //            //Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
    //            Regular_Expression_Body.Insert_SubTree_Left(Last_Inserted_Node, Inserted_Node.root);
    //            Rex_Transition_Graph.Insert_SubTree_Left(Last_Inserted_Graph_Node, Inserted_Graph_Node.root);
    //            //Next_Inserted_Node = Inserting_Node;
    //            //Next_Inserted_Graph_Node = Inserting_Graph_Node;
    //            //while (Inserting_Node.p != null)
    //            //    Inserting_Node = Inserting_Node.p;
    //            //Regular_Expression_Body = Inserting_Node;
    //        }
    //    }
    //    public System.String Sentence_Creation(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> regular_expression_body)
    //    {
    //        if (regular_expression_body.right != null && regular_expression_body.left != null)
    //        {
    //            Sentence_Creation(regular_expression_body.left);
    //            Sentence_Creation(regular_expression_body.right);
    //            switch (regular_expression_body.key.Key)
    //            {
    //                case Regular_Expression_Operator.Star:
    //                    if (regular_expression_body.left.key.Value1 == "Lambda")
    //                        regular_expression_body.key.Value1 = null;
    //                    else
    //                        regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1;
    //                    break;
    //                case Regular_Expression_Operator.Point:
    //                    if (regular_expression_body.left.key.Value1 == "Lambda")
    //                        regular_expression_body.key.Value1 = regular_expression_body.right.key.Value1;
    //                    else if (regular_expression_body.right.key.Value1 == "Lambda")
    //                        regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1;
    //                    else
    //                        regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1 + regular_expression_body.right.key.Value1;
    //                    break;
    //                case Regular_Expression_Operator.Plus:
    //                    if (regular_expression_body.left.key.Value1 == "Lambda")
    //                        regular_expression_body.key.Value1 = regular_expression_body.right.key.Value1;
    //                    else if (regular_expression_body.right.key.Value1 == "Lambda")
    //                        regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1;
    //                    else
    //                        regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1 + regular_expression_body.right.key.Value1;
    //                    break;
    //                case Regular_Expression_Operator.Alphabet:
    //                    break;
    //            }
    //        }
    //        if (regular_expression_body.key != null)
    //            return regular_expression_body.key.Value;
    //        else
    //            return null;
    //    }
    //    public Regular_Expression Regular_Expression_Simplification(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> regular_expression_body, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> rex_transition_graph)
    //    {
    //        if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
    //        {
    //            Regular_Expression_Simplification(regular_expression_body.left, rex_transition_graph.left);
    //            Regular_Expression_Simplification(regular_expression_body.right, rex_transition_graph.right);
    //            switch (regular_expression_body.key.Key)
    //            {
    //                case Regular_Expression_Operator.Star:
    //                    if (regular_expression_body.left.key.Value1 == "")
    //                    {
    //                        regular_expression_body.key.Value1 = "Lambda";
    //                        regular_expression_body.key.Key = Regular_Expression_Operator.Alphabet;
    //                        regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph, rex_transition_graph.left);
    //                    }
    //                    break;
    //                case Regular_Expression_Operator.Point:
    //                    if (regular_expression_body.left.key.Value1 == "" || regular_expression_body.right.key.Value1 == "")
    //                    {
    //                        regular_expression_body.key.Value1 = "";
    //                        regular_expression_body.key.Key = Regular_Expression_Operator.Alphabet;
    //                        if (regular_expression_body.right.key.Key == Regular_Expression_Operator.Alphabet)
    //                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.right);
    //                        else
    //                            regular_expression_body.Delete_SubTree_Right(regular_expression_body, regular_expression_body.right);
    //                        if (regular_expression_body.left.key.Key == Regular_Expression_Operator.Alphabet)
    //                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
    //                        else
    //                            regular_expression_body.Delete_SubTree_Left(regular_expression_body, regular_expression_body.left);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph, rex_transition_graph.right);//delete subtree
    //                        //regular_expression_body.DeleteLeft(regular_expression_body,regular_expression_body.right);
    //                        //rex_transition_graph.DeleteLeft(rex_transition_graph, rex_transition_graph.right);
    //                    }
    //                    else if (regular_expression_body.left.key.Value1 == "Lambda")
    //                    {
    //                        regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph, rex_transition_graph.left);
    //                        //if (regular_expression_body.p.left == regular_expression_body)
    //                        //{
    //                        regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                        //}
    //                        //else
    //                        //{
    //                        //    regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                        //    rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                        //}

    //                    }
    //                    else if (regular_expression_body.right.key.Value1 == "Lambda")
    //                    {
    //                        regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.right);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph, rex_transition_graph.right);
    //                        //if (regular_expression_body.p.left == regular_expression_body)
    //                        //{
    //                        regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                        //}
    //                        //else
    //                        //{
    //                        //    regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                        //    rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                        //}
    //                    }
    //                    //regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1 + regular_expression_body.right.key.Value1;
    //                    break;
    //                case Regular_Expression_Operator.Plus:
    //                    if (regular_expression_body.left.key.Value1 == "")
    //                    {
    //                        regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph, rex_transition_graph.left);//left ra jaye asli miavarim
    //                        regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                    }
    //                    else if (regular_expression_body.right.key.Value1 == "")
    //                    {
    //                        regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.right);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph, rex_transition_graph.right);
    //                        regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                        rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                    }
    //                    //regular_expression_body=regular_expression_body.
    //                    //if (regular_expression_body == regular_expression_body.p.left)
    //                    //{

    //                    //}
    //                    //else
    //                    //{
    //                    //    regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
    //                    //    rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
    //                    //}
    //                    break;
    //                //case Regular_Expression_Operator.Alphabet:
    //                //    //regular_expression_body.key.Value1 = regular_expression_body.right.key.Value1;
    //                //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2);
    //                //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2];
    //                //    G.V = 2;
    //                //    for (int i = 0; i < 2; i++)
    //                //        AdjL[i] = new Graph_Adjacency_List<System.String>(2);
    //                //    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", regular_expression_body.key.Value);
    //                //    rex_transition_graph.key.Value = G;
    //                //    break;
    //            }
    //        }
    //        return this;
    //    }
    //    public Nondeterministic_Finite_Accepter Regular_Expression_To_NFA(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> regular_expression_body, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> rex_transition_graph)
    //    {
    //        if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
    //        {
    //            Regular_Expression_To_NFA(regular_expression_body.left, rex_transition_graph.left);
    //            Regular_Expression_To_NFA(regular_expression_body.right, rex_transition_graph.right);
    //            switch (regular_expression_body.key.Key)
    //            {
    //                case Regular_Expression_Operator.Star:
    //                    //regular_expression_body.key.Value1 = regular_expression_body.right.key.Value1;
    //                    Star_Operation_In_Rex_Graph(rex_transition_graph);
    //                    break;
    //                case Regular_Expression_Operator.Point:
    //                    Point_Operation_In_Rex_Graph(regular_expression_body, rex_transition_graph);
    //                    break;
    //                case Regular_Expression_Operator.Plus:
    //                    //regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1 + regular_expression_body.right.key.Value1;
    //                    Plus_Operation_In_Rex_Graph(regular_expression_body, rex_transition_graph);
    //                    break;
    //                case Regular_Expression_Operator.Alphabet:
    //                    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2);
    //                    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2];
    //                    G.V = 2;
    //                    for (int i = 0; i < 2; i++)
    //                        AdjL[i] = new Graph_Adjacency_List<System.String>(2);
    //                    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", regular_expression_body.key.Value);
    //                    rex_transition_graph.key.Value = G;
    //                    break;
    //            }
    //        }
    //        return null;
    //    }
    //    private static void Plus_Operation_In_Rex_Graph(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> regular_expression_body, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> rex_transition_graph)
    //    {
    //        //if (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.right.key.Key == Regular_Expression_Operator.Star))
    //        //{//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad baraye graph rast
    //        Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2);
    //        Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2];
    //        G.V = rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2;
    //        for (int i = 0; i < rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2; i++)
    //            AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2);
    //        Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
    //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //        while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //        {
    //            if (rex_transition_graph.left.key.Value.Edges.key.end == rex_transition_graph.left.key.Value.V - 1)
    //                AdjL[rex_transition_graph.left.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.Edges.key.begin, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 3, "q" + (rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 3).ToString(), rex_transition_graph.left.key.Value.Edges.key.Alphabet);//end yal final state va akharin onsor ast
    //            else
    //                AdjL[rex_transition_graph.left.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.Edges.key.begin, rex_transition_graph.left.key.Value.Edges.key.end, "q" + rex_transition_graph.left.key.Value.Edges.key.end, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //            rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //        }
    //        rex_transition_graph.left.key.Value.Edges = temp;



    //        temp = rex_transition_graph.right.key.Value.Edges;
    //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
    //        while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
    //        {
    //            if (rex_transition_graph.right.key.Value.Edges.key.begin == 0)//motasel be raase avval
    //            {
    //                AdjL[0].List_Insert(G, AdjL, 0, "q0", rex_transition_graph.left.key.Value.V - 1, "q" + (rex_transition_graph.left.key.Value.V - 1).ToString(), rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //            }
    //            else if (rex_transition_graph.right.key.Value.Edges.key.end == rex_transition_graph.right.key.Value.V - 1)//mottasel be raase akhar
    //            {
    //                AdjL[rex_transition_graph.right.key.Value.Edges.key.begin + rex_transition_graph.left.key.Value.V - 2].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.Edges.key.begin + rex_transition_graph.left.key.Value.V - 2, "q" + (rex_transition_graph.right.key.Value.Edges.key.begin + rex_transition_graph.left.key.Value.V - 2).ToString(), rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 3, "q" + (rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 3).ToString(), rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //            }
    //            else//baghie yal haye graph rast
    //                AdjL[rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin - 2].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin - 2, "q" + (rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin - 2).ToString(), rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end - 2, "q" + (rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end - 2).ToString(), rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //            rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
    //        }
    //        rex_transition_graph.right.key.Value.Edges = temp;
    //        rex_transition_graph.key.Value = G;
    //        //}
    //        //else if (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.left.key.Key == Regular_Expression_Operator.Star))//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad baraye graph chap
    //        //{
    //        //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2);
    //        //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2];
    //        //    G.V = rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2;
    //        //    for (int i = 0; i < rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2; i++)
    //        //        AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2);
    //        //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.right.key.Value.Edges;
    //        //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        AdjL[rex_transition_graph.right.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.Edges.key.begin, "q" + rex_transition_graph.right.key.Value.Edges.key.begin, rex_transition_graph.right.key.Value.Edges.key.end, "q" + rex_transition_graph.right.key.Value.Edges.key.end, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.right.key.Value.Edges = temp;



    //        //    temp = rex_transition_graph.left.key.Value.Edges;
    //        //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        if (rex_transition_graph.left.key.Value.Edges.key.begin == 0)//motasel be raase avval
    //        //        {
    //        //            AdjL[0].List_Insert(G, AdjL, 0, "q0", rex_transition_graph.right.key.Value.V, "q" + rex_transition_graph.right.key.Value.V, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //        //        }
    //        //        else if (rex_transition_graph.left.key.Value.Edges.key.end == rex_transition_graph.right.key.Value.V - 1)//mottasel be raase akhar
    //        //        {
    //        //            AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V - 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V - 1, "q" + rex_transition_graph.right.key.Value.Edges.key.begin + rex_transition_graph.left.key.Value.V - 1, rex_transition_graph.right.key.Value.V - 1, "q" + rex_transition_graph.right.key.Value.V - 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //        //        }
    //        //        else//baghie yal haye graph rast
    //        //            AdjL[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.begin - 1].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.begin - 1, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.begin - 1, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.end - 1, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.end - 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.left.key.Value.Edges = temp;
    //        //}
    //        //else
    //        //{//halate addi
    //        //    //tak tak yal haye graph ghabli  ra be graph jadidi ezafe mikonim
    //        //    //rex_transition_graph.right.key.Value;graph paiini rast hast ve graph balai chap
    //        //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
    //        //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V];
    //        //    G.V = 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V;
    //        //    for (int i = 0; i < 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V; i++) 
    //        //        AdjL[i] = new Graph_Adjacency_List<System.String>(2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
    //        //    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", "Lambda");//right
    //        //    AdjL[0].List_Insert(G, AdjL, 0, "q0", rex_transition_graph.right.key.Value.V, "q" + rex_transition_graph.right.key.Value.V, "Lambda");//left
    //        //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
    //        //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V + 1, rex_transition_graph.left.key.Value.Edges.key.end + rex_transition_graph.right.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.end + rex_transition_graph.right.key.Value.V + 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.left.key.Value.Edges = temp;


    //        //    temp = rex_transition_graph.right.key.Value.Edges;
    //        //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        AdjL[rex_transition_graph.right.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.right.key.Value.Edges.key.begin + 1,  rex_transition_graph.right.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.right.key.Value.Edges.key.end + 1, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.right.key.Value.Edges = temp;

    //        //    AdjL[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V].List_Insert(G, AdjL, 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");

    //        //    AdjL[0].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.V, "q" + rex_transition_graph.right.key.Value.V, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");//right
    //        //    AdjL[0].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V-1, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");//left

    //        //}
    //    }
    //    private static void Point_Operation_In_Rex_Graph(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> regular_expression_body, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> rex_transition_graph)
    //    {
    //        //if (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.right.key.Key == Regular_Expression_Operator.Star))
    //        //{//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad
    //        Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1);
    //        Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1];
    //        G.V = rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1;
    //        for (int i = 0; i < rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1; i++)
    //            AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1);
    //        Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
    //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //        while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //        {
    //            AdjL[rex_transition_graph.left.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.Edges.key.begin, rex_transition_graph.left.key.Value.Edges.key.end, "q" + rex_transition_graph.left.key.Value.Edges.key.end, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //            rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //        }
    //        rex_transition_graph.left.key.Value.Edges = temp;

    //        //AdjL[rex_transition_graph.left.key.Value.V-1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V-1, "q" + rex_transition_graph.left.key.Value.V-1, rex_transition_graph.left.key.Value.V , "q" + rex_transition_graph.left.key.Value.V , "Lambda");//final state raase akhar bashad

    //        temp = rex_transition_graph.right.key.Value.Edges;
    //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
    //        while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
    //        {
    //            AdjL[rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin - 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin - 1, "q" + (rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin - 1).ToString(), rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end - 1, "q" + (rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end - 1).ToString(), rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //            rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
    //        }
    //        rex_transition_graph.right.key.Value.Edges = temp;
    //        rex_transition_graph.key.Value = G;
    //        //}
    //        //else if (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.left.key.Key == Regular_Expression_Operator.Star))
    //        //{//bedune Lambda vaghti ke raase avval graph chap darajeye yek bashad ya graph chap closure bashad va darajeye an 2 bashad
    //        //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1);
    //        //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1];
    //        //    G.V = rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1;
    //        //    for (int i = 0; i < rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1; i++)
    //        //        AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1);

    //        //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
    //        //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        AdjL[rex_transition_graph.left.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.Edges.key.begin, rex_transition_graph.left.key.Value.Edges.key.end, "q" + rex_transition_graph.left.key.Value.Edges.key.end, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.left.key.Value.Edges = temp;

    //        //    AdjL[rex_transition_graph.left.key.Value.V - 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V - 1, "q" + rex_transition_graph.left.key.Value.V - 1, rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.left.key.Value.V, "Lambda");//final state raase akhar bashad

    //        //    temp = rex_transition_graph.right.key.Value.Edges;
    //        //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        if (rex_transition_graph.right.key.Value.Edges.key.begin != 0)
    //        //            AdjL[rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.right.key.Value.Edges = temp;
    //        //}
    //        //else
    //        //{//halate addi
    //        //    //tak tak yal haye graph ghabli  ra be graph jadidi ezafe mikonim
    //        //    //rex_transition_graph.right.key.Value;
    //        //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
    //        //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V];
    //        //    G.V = 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V;
    //        //    for (int i = 0; i < 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V; i++)
    //        //        AdjL[i] = new Graph_Adjacency_List<System.String>(2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
    //        //    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", regular_expression_body.key.Value);
    //        //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
    //        //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.begin + 1, rex_transition_graph.left.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.end + 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.left.key.Value.Edges = temp;

    //        //    AdjL[rex_transition_graph.left.key.Value.V + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.V + 1, rex_transition_graph.left.key.Value.V + 2, "q" + rex_transition_graph.left.key.Value.V + 2, "Lambda");//final state raase akhar bashad

    //        //    temp = rex_transition_graph.right.key.Value.Edges;
    //        //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
    //        //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
    //        //    {
    //        //        AdjL[rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin + 1, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end + 1, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
    //        //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
    //        //    }
    //        //    rex_transition_graph.right.key.Value.Edges = temp;

    //        //    AdjL[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V].List_Insert(G, AdjL, 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");
    //        //}
    //    }
    //    private static void Star_Operation_In_Rex_Graph(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> rex_transition_graph)
    //    {
    //        if (rex_transition_graph.left.key.Value.V == 2)
    //        {//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad
    //            Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2);
    //            Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2];
    //            G.V = 2;
    //            for (int i = 0; i < 2; i++)
    //                AdjL[i] = new Graph_Adjacency_List<System.String>(2);
    //            AdjL[0].List_Insert(G, AdjL, 0, "q0", 0, "q0", rex_transition_graph.left.key.Value.Edges.nil.next.key.Alphabet);
    //            AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", "Lambda");
    //            rex_transition_graph.key.Value = G;
    //        }
    //        else
    //        {//halate addi
    //            //tak tak yal haye graph ghabli  ra be graph jadidi ezafe mikonim
    //            //rex_transition_graph.right.key.Value;
    //            Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2 + rex_transition_graph.left.key.Value.V);
    //            Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2 + rex_transition_graph.left.key.Value.V];
    //            G.V = 2 + rex_transition_graph.left.key.Value.V;
    //            for (int i = 0; i < 2 + rex_transition_graph.left.key.Value.V; i++)
    //                AdjL[i] = new Graph_Adjacency_List<System.String>(2 + rex_transition_graph.left.key.Value.V);
    //            AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", "Lambda");
    //            Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
    //            rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
    //            while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
    //            {
    //                AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.begin + 1, rex_transition_graph.left.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.end + 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
    //                rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
    //            }
    //            rex_transition_graph.left.key.Value.Edges = temp;
    //            //final state raase akhar bashad

    //            AdjL[rex_transition_graph.left.key.Value.V].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.left.key.Value.V, 1 + rex_transition_graph.left.key.Value.V, "q" + 1 + rex_transition_graph.left.key.Value.V, "Lambda");
    //            AdjL[0].List_Insert(G, AdjL, 0, "q0", 1 + rex_transition_graph.left.key.Value.V, "q" + 1 + rex_transition_graph.left.key.Value.V, "Lambda");
    //            AdjL[rex_transition_graph.left.key.Value.V + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.V + 1, 0, "q0", "Lambda");
    //            rex_transition_graph.key.Value = G;
    //        }

    //    }
    //    public Regular_Expression Regular_Expression_Homomorphic_Image(Regular_Expression Rex, Key_Value_Pair<Regular_Expression, Regular_Expression>[] Homomorphic_Function)
    //    {
    //        Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>>> changing_Statement_Occurences = new Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>>>();
    //        Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>>> changing_Statement_Occurences_tg = new Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>>>();
    //        Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> x = Rex.Regular_Expression_Body;
    //        Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>> y = Rex.Rex_Transition_Graph;
    //        x = Rex.Regular_Expression_Body.Tree_Inorder_Successor(x);
    //        y = Rex.Rex_Transition_Graph.Tree_Inorder_Successor(y);
    //        while (x.root == Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>>.nil)
    //        {
    //            for (int i = 0; i < Homomorphic_Function.Length; i++)
    //                if (Rex.Regular_Expression_Body.Tree_Equal(Homomorphic_Function[i].Key.Regular_Expression_Body.root, x))
    //                {
    //                    changing_Statement_Occurences.List_Insert(x);
    //                    changing_Statement_Occurences_tg.List_Insert(y);
    //                    break;
    //                }
    //            x = Rex.Regular_Expression_Body.Tree_Inorder_Successor(x);
    //            y = Rex.Rex_Transition_Graph.Tree_Inorder_Successor(y);
    //        }
    //        Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>>> temp = changing_Statement_Occurences;
    //        Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>>> temptg = changing_Statement_Occurences_tg;
    //        changing_Statement_Occurences = changing_Statement_Occurences.nil.next;
    //        changing_Statement_Occurences_tg = changing_Statement_Occurences_tg.nil.next;
    //        while (changing_Statement_Occurences.key != null)
    //        {
    //            if (changing_Statement_Occurences.key.p.right == changing_Statement_Occurences.key)
    //            {
    //                for (int i = 0; i < Homomorphic_Function.Length; i++)
    //                    if (Homomorphic_Function[i].Key.Regular_Expression_Body.Tree_Equal(Homomorphic_Function[i].Key.Regular_Expression_Body.root, changing_Statement_Occurences.key))
    //                    {
    //                        //changing_Statement_Occurences.key.DeleteRight(changing_Statement_Occurences.key.p, Homomorphic_Function[i].Key.Regular_Expression_Body.root);
    //                        changing_Statement_Occurences.key.Insert_SubTree_Right(changing_Statement_Occurences.key.p, Homomorphic_Function[i].Value.Regular_Expression_Body.root);
    //                        changing_Statement_Occurences_tg.key.Insert_SubTree_Right(changing_Statement_Occurences_tg.key.p, Homomorphic_Function[i].Value.Rex_Transition_Graph.root);
    //                        break;
    //                    }
    //            }
    //            else
    //            {
    //                if (changing_Statement_Occurences.key.p.left == changing_Statement_Occurences.key)
    //                    for (int j = 0; j < Homomorphic_Function.Length; j++)
    //                        if (Homomorphic_Function[j].Key.Regular_Expression_Body.Tree_Equal(Homomorphic_Function[j].Key.Regular_Expression_Body.root, changing_Statement_Occurences.key))
    //                        {
    //                            //changing_Statement_Occurences.key.DeleteLeft(changing_Statement_Occurences.key.p, Homomorphic_Function[j].Key.Regular_Expression_Body.root);
    //                            changing_Statement_Occurences.key.Insert_SubTree_Left(changing_Statement_Occurences.key.p, Homomorphic_Function[j].Value.Regular_Expression_Body.root);
    //                            changing_Statement_Occurences_tg.key.Insert_SubTree_Left(changing_Statement_Occurences_tg.key.p, Homomorphic_Function[j].Value.Rex_Transition_Graph.root);
    //                            break;
    //                        }
    //            }
    //            changing_Statement_Occurences = changing_Statement_Occurences.next;
    //            changing_Statement_Occurences_tg = changing_Statement_Occurences_tg.next;
    //        }
    //        changing_Statement_Occurences = temp;
    //        changing_Statement_Occurences_tg = temptg;
    //        return Rex;
    //    }
    //    public bool Is_Nullable(Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, System.String>> regular_expression_body, Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> rex_transition_graph)
    //    {
    //        if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
    //        {
    //            Regular_Expression_To_NFA(regular_expression_body.left, rex_transition_graph.left);
    //            Regular_Expression_To_NFA(regular_expression_body.right, rex_transition_graph.right);
    //            switch (regular_expression_body.key.Key)
    //            {
    //                case Regular_Expression_Operator.Star:

    //                    break;
    //                case Regular_Expression_Operator.Point:

    //                    break;
    //                case Regular_Expression_Operator.Plus:

    //                    break;
    //                case Regular_Expression_Operator.Alphabet:
    //                    if (regular_expression_body.key.Value == "Lambda")

    //                        break;
    //            }
    //        }
    //        return null;
    //    }
    //    #region IComparable Members

    //    public int CompareTo(object obj)
    //    {
    //        throw new NotImplementedException();
    //    }

    //    #endregion
    //}
    public class Regular_Expression : IComparable,ICloneable
    {
        public Threaded_Tree<Regular_Expression> Regular_Expression_Body = new Threaded_Tree<Regular_Expression>();
        public int Leaf_Position = 0;
        public bool Nullable = false;
        public Circular_Doubly_Linked_List<int> Firstpos = new Circular_Doubly_Linked_List<int>(), Lastpos = new Circular_Doubly_Linked_List<int>(), Followpos = new Circular_Doubly_Linked_List<int>();
        public Regular_Expression_Operator Operator;
        public System.String Alphabet = null;
        public Graph<System.String> Transition_Graph = null;
        public Regular_Expression()
        {

        }
        public void Insert_Node(Threaded_Tree<Regular_Expression> Last_Inserted_Node, Threaded_Tree<Regular_Expression> Next_Inserted_Node, Regular_Expression_Operator Rex_Operator, System.String Alphabet, bool Is_Inserted_to_Right_Subtree)
        {
            Regular_Expression new_Rex = new Regular_Expression();
            new_Rex.Alphabet = Alphabet;
            new_Rex.Operator = Rex_Operator;
            if (Regular_Expression_Body.root == null)
            {
                //Rex_Transition_Graph.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,Graph<System.String>>>();
                //Regular_Expression_Body.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
                //Regular_Expression_Body.root.key = KV;
                //Next_Inserted_Node=Regular_Expression_Body.root;
                //Next_Inserted_Graph_Node = Rex_Transition_Graph.root;
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
                Next_Inserted_Node.key = new_Rex;
                Regular_Expression_Body.InsertLeft(Last_Inserted_Node, Next_Inserted_Node);
                //Regular_Expression_Body = Last_Inserted_Node;
                //Rex_Transition_Graph = Last_Inserted_Graph_Node;
                //Next_Inserted_Node =Inserting_Node;
                //Next_Inserted_Graph_Node = Inserting_Graph_Node;
            }
            else if (Is_Inserted_to_Right_Subtree)
            {
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,string>>();
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
                Next_Inserted_Node.key = new_Rex;
                Regular_Expression_Body.InsertRight(Last_Inserted_Node, Next_Inserted_Node);
                //Next_Inserted_Node = Inserting_Node;
                //Next_Inserted_Graph_Node = Inserting_Graph_Node;
                //while (Inserting_Node.p != null)
                //    Inserting_Node = Inserting_Node.p;
                //Regular_Expression_Body = Inserting_Node;
            }
            else
            {
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
                Next_Inserted_Node.key = new_Rex;
                Regular_Expression_Body.InsertLeft(Last_Inserted_Node, Next_Inserted_Node);
                //Next_Inserted_Node = Inserting_Node;
                //Next_Inserted_Graph_Node = Inserting_Graph_Node;
                //while (Inserting_Node.p != null)
                //    Inserting_Node = Inserting_Node.p;
                //Regular_Expression_Body = Inserting_Node;
            }
        }
        public void Insert_Regular_Expression(Threaded_Tree<Regular_Expression> Last_Inserted_Node, Threaded_Tree<Regular_Expression> Inserted_Node,  bool Is_Inserted_to_Right_Subtree)
        {
            //Key_Value_Pair<Regular_Expression_Operator, System.String> KV = new Key_Value_Pair<Regular_Expression_Operator, string>(Rex_Operator, Alphabet);

            if (Regular_Expression_Body.root == null)
            {
                //Rex_Transition_Graph.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,Graph<System.String>>>();
                //Regular_Expression_Body.root=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,string>>();
                //Regular_Expression_Body.root.key = KV;
                //Next_Inserted_Node=Regular_Expression_Body.root;
                //Next_Inserted_Graph_Node = Rex_Transition_Graph.root;
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
                //Inserted_Node.key = KV;
                //Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
                Regular_Expression_Body.Insert_SubTree_Left(Last_Inserted_Node, Inserted_Node.root);
                //Regular_Expression_Body = Last_Inserted_Node;
                //Rex_Transition_Graph = Last_Inserted_Graph_Node;
                //Next_Inserted_Node =Inserting_Node;
                //Next_Inserted_Graph_Node = Inserting_Graph_Node;
            }
            else if (Is_Inserted_to_Right_Subtree)
            {
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node=new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator,string>>();
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
                //Inserted_Node.key = KV;
                //Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
                Regular_Expression_Body.Insert_SubTree_Right(Last_Inserted_Node, Inserted_Node.root);
                //Next_Inserted_Node = Inserting_Node;
                //Next_Inserted_Graph_Node = Inserting_Graph_Node;
                //while (Inserting_Node.p != null)
                //    Inserting_Node = Inserting_Node.p;
                //Regular_Expression_Body = Inserting_Node;
            }
            else
            {
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>> Inserting_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, string>>();
                //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>> Inserting_Graph_Node = new Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<System.String>>>();
                //Inserted_Node.key = KV;
                //Inserted_Graph_Node.key = new Key_Value_Pair<Regular_Expression_Operator, Graph<string>>();
                Regular_Expression_Body.Insert_SubTree_Left(Last_Inserted_Node, Inserted_Node.root);
                //Next_Inserted_Node = Inserting_Node;
                //Next_Inserted_Graph_Node = Inserting_Graph_Node;
                //while (Inserting_Node.p != null)
                //    Inserting_Node = Inserting_Node.p;
                //Regular_Expression_Body = Inserting_Node;
            }
        }
        public System.String Sentence_Creation(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null)
            {
                Sentence_Creation(regular_expression_body.left);
                Sentence_Creation(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        if (regular_expression_body.left.key.Alphabet == "Lambda")
                            regular_expression_body.key.Alphabet = null;
                        else
                            regular_expression_body.key.Alphabet = regular_expression_body.left.key.Alphabet;
                        break;
                    case Regular_Expression_Operator.Point:
                        if (regular_expression_body.left.key.Alphabet == "Lambda")
                            regular_expression_body.key.Alphabet = regular_expression_body.right.key.Alphabet;
                        else if (regular_expression_body.right.key.Alphabet == "Lambda")
                            regular_expression_body.key.Alphabet = regular_expression_body.left.key.Alphabet;
                        else
                            regular_expression_body.key.Alphabet = regular_expression_body.left.key.Alphabet + regular_expression_body.right.key.Alphabet;
                        break;
                    case Regular_Expression_Operator.Plus:
                        if (regular_expression_body.left.key.Alphabet == "Lambda")
                            regular_expression_body.key.Alphabet = regular_expression_body.right.key.Alphabet;
                        else if (regular_expression_body.right.key.Alphabet == "Lambda")
                            regular_expression_body.key.Alphabet = regular_expression_body.left.key.Alphabet;
                        else
                            regular_expression_body.key.Alphabet = regular_expression_body.left.key.Alphabet + regular_expression_body.right.key.Alphabet;
                        break;
                    case Regular_Expression_Operator.Alphabet:
                        break;
                }
            }
            if (regular_expression_body.key != null)
                return regular_expression_body.key.Alphabet;
            else
                return null;
        }
        public Regular_Expression Regular_Expression_Simplification(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Regular_Expression_Simplification(regular_expression_body.left);
                Regular_Expression_Simplification(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        if (regular_expression_body.left.key.Alphabet == "")
                        {
                            regular_expression_body.key.Alphabet = "Lambda";
                            regular_expression_body.key.Operator = Regular_Expression_Operator.Alphabet;
                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
                        }
                        break;
                    case Regular_Expression_Operator.Point:
                        if (regular_expression_body.left.key.Alphabet == "" || regular_expression_body.right.key.Alphabet == "")
                        {
                            regular_expression_body.key.Alphabet = "";
                            regular_expression_body.key.Operator = Regular_Expression_Operator.Alphabet;
                            if (regular_expression_body.right.key.Operator == Regular_Expression_Operator.Alphabet)
                                regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.right);
                            else
                                regular_expression_body.Delete_SubTree_Right(regular_expression_body, regular_expression_body.right);
                            if (regular_expression_body.left.key.Operator == Regular_Expression_Operator.Alphabet)
                                regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
                            else
                                regular_expression_body.Delete_SubTree_Left(regular_expression_body, regular_expression_body.left);
                            //regular_expression_body.DeleteLeft(regular_expression_body,regular_expression_body.right);
                            //rex_transition_graph.DeleteLeft(rex_transition_graph, rex_transition_graph.right);
                        }
                        else if (regular_expression_body.left.key.Alphabet == "Lambda")
                        {
                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
                            //if (regular_expression_body.p.left == regular_expression_body)
                            //{
                            regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                            //}
                            //else
                            //{
                            //    regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                            //    rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
                            //}

                        }
                        else if (regular_expression_body.right.key.Alphabet == "Lambda")
                        {
                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.right);
                            //if (regular_expression_body.p.left == regular_expression_body)
                            //{
                            regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                            //}
                            //else
                            //{
                            //    regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                            //    rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
                            //}
                        }
                        //regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1 + regular_expression_body.right.key.Value1;
                        break;
                    case Regular_Expression_Operator.Plus:
                        if (regular_expression_body.left.key.Alphabet == "")
                        {
                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.left);
                            regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                        }
                        else if (regular_expression_body.right.key.Alphabet == "")
                        {
                            regular_expression_body.Node_Delete(regular_expression_body, regular_expression_body.right);
                            regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                        }
                        //regular_expression_body=regular_expression_body.
                        //if (regular_expression_body == regular_expression_body.p.left)
                        //{

                        //}
                        //else
                        //{
                        //    regular_expression_body.Node_Delete(regular_expression_body.p, regular_expression_body);
                        //    rex_transition_graph.Node_Delete(rex_transition_graph.p, rex_transition_graph);
                        //}
                        break;
                    //case Regular_Expression_Operator.Alphabet:
                    //    //regular_expression_body.key.Value1 = regular_expression_body.right.key.Value1;
                    //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2);
                    //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2];
                    //    G.V = 2;
                    //    for (int i = 0; i < 2; i++)
                    //        AdjL[i] = new Graph_Adjacency_List<System.String>(2);
                    //    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", regular_expression_body.key.Value);
                    //    rex_transition_graph.key.Value = G;
                    //    break;
                }
            }
            return this;
        }
        public Nondeterministic_Finite_Accepter Regular_Expression_To_NFA(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Regular_Expression_To_NFA(regular_expression_body.left);
                Regular_Expression_To_NFA(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        //regular_expression_body.key.Value1 = regular_expression_body.right.key.Value1;
                        Star_Operation_In_Rex_Graph(regular_expression_body);
                        break;
                    case Regular_Expression_Operator.Point:
                        Point_Operation_In_Rex_Graph(regular_expression_body);
                        break;
                    case Regular_Expression_Operator.Plus:
                        //regular_expression_body.key.Value1 = regular_expression_body.left.key.Value1 + regular_expression_body.right.key.Value1;
                        Plus_Operation_In_Rex_Graph(regular_expression_body);
                        break;
                    case Regular_Expression_Operator.Alphabet:
                        Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2);
                        Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2];
                        G.V = 2;
                        for (int i = 0; i < 2; i++)
                            AdjL[i] = new Graph_Adjacency_List<System.String>(2);
                        AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", regular_expression_body.key.Alphabet);
                        regular_expression_body.key.Transition_Graph = G;
                        break;
                }
            }
            return null;
        }
        public Deterministic_Finite_Accepter Regular_Expression_To_DFA(Threaded_Tree<Regular_Expression> regular_expression_body,string[] Input_Alphabet)
        {
            int Initial_Position = 1;
            Leaf_Position_Maker(regular_expression_body, ref Initial_Position);
            Nullable_Finder(regular_expression_body);
            Firstpos_Finder(regular_expression_body);
            Lastpos_Finder(regular_expression_body);
            Followpos_Finder(regular_expression_body);
            Deterministic_Finite_Accepter DFA = new Deterministic_Finite_Accepter();
            Array<string> Transition_Function = null;
            Circular_Doubly_Linked_List<Triple<string, string, string>> New_States_List = new Circular_Doubly_Linked_List<Triple<string, string, string>>();
            Circular_Doubly_Linked_List<Key_Value_Pair<bool, string>> Dstates = new Circular_Doubly_Linked_List<Key_Value_Pair<bool, string>>();
            string State_Name = null;
            Circular_Doubly_Linked_List<int> temp = regular_expression_body.key.Firstpos;
            temp = temp.nil.next;
            while (temp.List_Length == 0)
            {
                State_Name += temp.key.ToString();
                if (temp.next.List_Length == 0)
                    State_Name += ",";
                temp = temp.next;
            }
            Key_Value_Pair<bool, string> KV = new Key_Value_Pair<bool, string>(false, State_Name);
            Dstates.List_Insert(KV);
            Circular_Doubly_Linked_List<int> Followpos_Union = new Circular_Doubly_Linked_List<int>();
            while (true)
            {
                bool there_is_an_unmarked_state = false;
                Circular_Doubly_Linked_List<Key_Value_Pair<bool, string>> temp1 = Dstates;
                temp1 = temp1.nil.next;
                while (temp1.List_Length == 0)
                {
                    if (!temp1.key.Key)
                    {
                        temp1.key.Key = true;
                        there_is_an_unmarked_state = true;
                        break;
                    }
                    temp1 = temp1.next;
                }
                if (!there_is_an_unmarked_state)
                    break;
                Circular_Doubly_Linked_List<int> State_Positions_Number_List = new Circular_Doubly_Linked_List<int>();
                State_Positions_Number_List = String_To_Array_Of_Integers_Seperated_By_Comma(temp1.key.Value);
                State_Name = temp1.key.Value;
                int[] State_Positions_Number_Array = State_Positions_Number_List.List_To_Array(State_Positions_Number_List);
                for (int i = 0; i < Input_Alphabet.Length; i++)
                {
                    for (int j = 0; j < State_Positions_Number_Array.Length; j++)
                    {
                        Regular_Expression Searching_Rex = new Regular_Expression();
                        Searching_Rex.Leaf_Position = State_Positions_Number_Array[j];
                        Threaded_Tree<Regular_Expression> Result = regular_expression_body.Tree_Search(this.Regular_Expression_Body, Searching_Rex);
                        if (Result != null)
                        {
                            Searching_Rex = Result.key;
                            if (Searching_Rex.Alphabet == Input_Alphabet[i])
                                Followpos_Union = Followpos_Union.List_Union(Followpos_Union, Searching_Rex.Followpos);
                        }
                    }
                    temp1 = Dstates;
                    bool Is_Repeated = false;
                    string New_State_Name = null;
                    temp1 = temp1.nil.next;
                    while (temp1.List_Length == 0)
                    {
                        Circular_Doubly_Linked_List<int> Each_State_Positions = new Circular_Doubly_Linked_List<int>();
                        Each_State_Positions = String_To_Array_Of_Integers_Seperated_By_Comma(temp1.key.Value);
                        if (Each_State_Positions.Is_Equal(Each_State_Positions,Followpos_Union))
                        {
                            Is_Repeated = true;
                            temp = Followpos_Union;
                            temp = temp.nil.next;
                            while (temp.List_Length == 0)
                            {
                                New_State_Name += temp.key.ToString();
                                if (temp.next.List_Length == 0)
                                    New_State_Name += ",";
                                temp = temp.next;
                            }
                            break;
                        }
                        temp1 = temp1.next;
                    }
                    if (!Is_Repeated)
                    {
                        temp = Followpos_Union;
                        temp = temp.nil.next;
                        while (temp.List_Length == 0)
                        {
                            New_State_Name += temp.key.ToString();
                            if (temp.next.List_Length == 0)
                                New_State_Name += ",";
                            temp = temp.next;
                        }
                        KV = new Key_Value_Pair<bool, string>(false, New_State_Name);
                        Dstates.List_Insert(KV);
                    }
                    else
                        Is_Repeated = true;
                    //if (New_State_Name == null)
                    //    New_State_Name = State_Name;
                    Triple<string, string, string> New_States = new Triple<string, string, string>(State_Name, Input_Alphabet[i], New_State_Name);
                    New_States_List.List_Insert(New_States);
                    Followpos_Union = new Circular_Doubly_Linked_List<int>();
                }
            }
            Circular_Doubly_Linked_List<string> New_States_Unique = new Circular_Doubly_Linked_List<string>();
            Circular_Doubly_Linked_List<Triple<string, string, string>> temp2 = New_States_List;
            New_States_List = New_States_List.nil.next;
            while (New_States_List.List_Length == 0)
            {
                if (New_States_Unique.nil == null || New_States_Unique.List_Search(New_States_List.key.Value1) == null || (New_States_Unique.List_Search(New_States_List.key.Value1) != null && New_States_Unique.List_Search(New_States_List.key.Value1).List_Length != 0))
                    New_States_Unique.List_Insert(New_States_List.key.Value1);
                New_States_List = New_States_List.next;
            }
            New_States_List = temp2;
            Transition_Function = new Array<string>(New_States_Unique.nil.List_Length + 1, Input_Alphabet.Length + 1);
            int Counter = 1;
            Circular_Doubly_Linked_List<string> temp3 = New_States_Unique;
            New_States_Unique = New_States_Unique.nil.next;
            while (New_States_Unique.List_Length == 0)
            {
                Transition_Function.M[Counter++, 0] = New_States_Unique.key;
                New_States_Unique = New_States_Unique.next;
            }
            New_States_Unique = temp3;
            Counter = 1;
            for(int i = 0 ; i <Input_Alphabet.Length ; i++)
                Transition_Function.M[0, Counter++] = Input_Alphabet[i];
            temp2 = New_States_List;
            New_States_List = New_States_List.nil.next;
            while (New_States_List.List_Length == 0)
            {
                int Column_Number = 0, Row_Number = 0;
                for (int i = 0; i < Transition_Function.Rows; i++)
                    if (New_States_List.key.Value1 == Transition_Function.M[i, 0])
                    {
                        Row_Number = i;
                        break;
                    }
                for (int i = 0; i < Transition_Function.Columns; i++)
                    if (New_States_List.key.Value2 == Transition_Function.M[0, i])
                    {
                        Column_Number = i;
                        break;
                    }
                Transition_Function.M[Row_Number, Column_Number] = New_States_List.key.Value3;
                New_States_List = New_States_List.next;
            }
            New_States_List = temp2;
            DFA.Transition_Function = Transition_Function;
            return DFA;
        }
        private Circular_Doubly_Linked_List<int> String_To_Array_Of_Integers_Seperated_By_Comma(string Input_String)
        {
            Circular_Doubly_Linked_List<string> State_Positions = new Circular_Doubly_Linked_List<string>();
            string Individual_Positions = null;
            for (int j = 0; j < Input_String.Length; j++)
            {
                if (Input_String[j].ToString() != ",")
                    Individual_Positions += Input_String[j].ToString();
                else
                {
                    State_Positions.List_Insert(Individual_Positions);
                    Individual_Positions = null;
                }
            }
            State_Positions.List_Insert(Individual_Positions);
            State_Positions = State_Positions.List_Reserve(State_Positions);
            string[] State_Positions_Array = null;
            State_Positions_Array = State_Positions.List_To_Array(State_Positions);
            Circular_Doubly_Linked_List<int> State_Positions_Number_List = new Circular_Doubly_Linked_List<int>();
            for (int j = 0; j < State_Positions_Array.Length; j++)
            {
                int Position_Number = 0;
                for (int k = 0; k < State_Positions_Array[j].Length; k++)
                    Position_Number += State_Positions_Array[j][k] * (int)Math.Pow(10, State_Positions_Array[j].Length - k - 1) - 48;
                State_Positions_Number_List.List_Insert(Position_Number);
            }
            return State_Positions_Number_List;
        }
        private static void Plus_Operation_In_Rex_Graph(Threaded_Tree<Regular_Expression> rex_transition_graph)
        {
            //if (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.right.key.Key == Regular_Expression_Operator.Star))
            //{//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad baraye graph rast
            Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 2);
            Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 2];
            G.V = rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 2;
            for (int i = 0; i < rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 2; i++)
                AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 2);
            Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Transition_Graph.Edges;
            rex_transition_graph.left.key.Transition_Graph.Edges = rex_transition_graph.left.key.Transition_Graph.Edges.nil.next;
            while (rex_transition_graph.left.key.Transition_Graph.Edges.List_Length == 0)
            {
                if (rex_transition_graph.left.key.Transition_Graph.Edges.key.end == rex_transition_graph.left.key.Transition_Graph.V - 1)
                    AdjL[rex_transition_graph.left.key.Transition_Graph.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.Edges.key.begin, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.begin, rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 3, "q" + (rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 3).ToString(), rex_transition_graph.left.key.Transition_Graph.Edges.key.Alphabet);//end yal final state va akharin onsor ast
                else
                    AdjL[rex_transition_graph.left.key.Transition_Graph.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.Edges.key.begin, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.begin, rex_transition_graph.left.key.Transition_Graph.Edges.key.end, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.end, rex_transition_graph.left.key.Transition_Graph.Edges.key.Alphabet);
                rex_transition_graph.left.key.Transition_Graph.Edges = rex_transition_graph.left.key.Transition_Graph.Edges.next;
            }
            rex_transition_graph.left.key.Transition_Graph.Edges = temp;



            temp = rex_transition_graph.right.key.Transition_Graph.Edges;
            rex_transition_graph.right.key.Transition_Graph.Edges = rex_transition_graph.right.key.Transition_Graph.Edges.nil.next;
            while (rex_transition_graph.right.key.Transition_Graph.Edges.List_Length == 0)
            {
                if (rex_transition_graph.right.key.Transition_Graph.Edges.key.begin == 0)//motasel be raase avval
                {
                    AdjL[0].List_Insert(G, AdjL, 0, "q0", rex_transition_graph.left.key.Transition_Graph.V - 1, "q" + (rex_transition_graph.left.key.Transition_Graph.V - 1).ToString(), rex_transition_graph.right.key.Transition_Graph.Edges.key.Alphabet);
                }
                else if (rex_transition_graph.right.key.Transition_Graph.Edges.key.end == rex_transition_graph.right.key.Transition_Graph.V - 1)//mottasel be raase akhar
                {
                    AdjL[rex_transition_graph.right.key.Transition_Graph.Edges.key.begin + rex_transition_graph.left.key.Transition_Graph.V - 2].List_Insert(G, AdjL, rex_transition_graph.right.key.Transition_Graph.Edges.key.begin + rex_transition_graph.left.key.Transition_Graph.V - 2, "q" + (rex_transition_graph.right.key.Transition_Graph.Edges.key.begin + rex_transition_graph.left.key.Transition_Graph.V - 2).ToString(), rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 3, "q" + (rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 3).ToString(), rex_transition_graph.right.key.Transition_Graph.Edges.key.Alphabet);
                }
                else//baghie yal haye graph rast
                    AdjL[rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.begin - 2].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.begin - 2, "q" + (rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.begin - 2).ToString(), rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.end - 2, "q" + (rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.end - 2).ToString(), rex_transition_graph.right.key.Transition_Graph.Edges.key.Alphabet);
                rex_transition_graph.right.key.Transition_Graph.Edges = rex_transition_graph.right.key.Transition_Graph.Edges.next;
            }
            rex_transition_graph.right.key.Transition_Graph.Edges = temp;
            rex_transition_graph.key.Transition_Graph = G;
            //}
            //else if (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.left.key.Key == Regular_Expression_Operator.Star))//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad baraye graph chap
            //{
            //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2);
            //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2];
            //    G.V = rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2;
            //    for (int i = 0; i < rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2; i++)
            //        AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 2);
            //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.right.key.Value.Edges;
            //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
            //    {
            //        AdjL[rex_transition_graph.right.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.Edges.key.begin, "q" + rex_transition_graph.right.key.Value.Edges.key.begin, rex_transition_graph.right.key.Value.Edges.key.end, "q" + rex_transition_graph.right.key.Value.Edges.key.end, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.right.key.Value.Edges = temp;



            //    temp = rex_transition_graph.left.key.Value.Edges;
            //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
            //    {
            //        if (rex_transition_graph.left.key.Value.Edges.key.begin == 0)//motasel be raase avval
            //        {
            //            AdjL[0].List_Insert(G, AdjL, 0, "q0", rex_transition_graph.right.key.Value.V, "q" + rex_transition_graph.right.key.Value.V, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
            //        }
            //        else if (rex_transition_graph.left.key.Value.Edges.key.end == rex_transition_graph.right.key.Value.V - 1)//mottasel be raase akhar
            //        {
            //            AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V - 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V - 1, "q" + rex_transition_graph.right.key.Value.Edges.key.begin + rex_transition_graph.left.key.Value.V - 1, rex_transition_graph.right.key.Value.V - 1, "q" + rex_transition_graph.right.key.Value.V - 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
            //        }
            //        else//baghie yal haye graph rast
            //            AdjL[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.begin - 1].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.begin - 1, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.begin - 1, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.end - 1, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.Edges.key.end - 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.left.key.Value.Edges = temp;
            //}
            //else
            //{//halate addi
            //    //tak tak yal haye graph ghabli  ra be graph jadidi ezafe mikonim
            //    //rex_transition_graph.right.key.Value;graph paiini rast hast ve graph balai chap
            //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
            //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V];
            //    G.V = 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V;
            //    for (int i = 0; i < 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V; i++) 
            //        AdjL[i] = new Graph_Adjacency_List<System.String>(2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
            //    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", "Lambda");//right
            //    AdjL[0].List_Insert(G, AdjL, 0, "q0", rex_transition_graph.right.key.Value.V, "q" + rex_transition_graph.right.key.Value.V, "Lambda");//left
            //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
            //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
            //    {
            //        AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.begin + rex_transition_graph.right.key.Value.V + 1, rex_transition_graph.left.key.Value.Edges.key.end + rex_transition_graph.right.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.end + rex_transition_graph.right.key.Value.V + 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.left.key.Value.Edges = temp;


            //    temp = rex_transition_graph.right.key.Value.Edges;
            //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
            //    {
            //        AdjL[rex_transition_graph.right.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.right.key.Value.Edges.key.begin + 1,  rex_transition_graph.right.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.right.key.Value.Edges.key.end + 1, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.right.key.Value.Edges = temp;

            //    AdjL[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V].List_Insert(G, AdjL, 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");

            //    AdjL[0].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.V, "q" + rex_transition_graph.right.key.Value.V, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");//right
            //    AdjL[0].List_Insert(G, AdjL, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V-1, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");//left

            //}
        }
        private static void Point_Operation_In_Rex_Graph(Threaded_Tree<Regular_Expression> rex_transition_graph)
        {
            //if (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.right.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.right.key.Key == Regular_Expression_Operator.Star))
            //{//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad
            Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 1);
            Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 1];
            G.V = rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 1;
            for (int i = 0; i < rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 1; i++)
                AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Transition_Graph.V + rex_transition_graph.left.key.Transition_Graph.V - 1);
            Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Transition_Graph.Edges;
            rex_transition_graph.left.key.Transition_Graph.Edges = rex_transition_graph.left.key.Transition_Graph.Edges.nil.next;
            while (rex_transition_graph.left.key.Transition_Graph.Edges.List_Length == 0)
            {
                AdjL[rex_transition_graph.left.key.Transition_Graph.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.Edges.key.begin, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.begin, rex_transition_graph.left.key.Transition_Graph.Edges.key.end, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.end, rex_transition_graph.left.key.Transition_Graph.Edges.key.Alphabet);
                rex_transition_graph.left.key.Transition_Graph.Edges = rex_transition_graph.left.key.Transition_Graph.Edges.next;
            }
            rex_transition_graph.left.key.Transition_Graph.Edges = temp;

            //AdjL[rex_transition_graph.left.key.Value.V-1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V-1, "q" + rex_transition_graph.left.key.Value.V-1, rex_transition_graph.left.key.Value.V , "q" + rex_transition_graph.left.key.Value.V , "Lambda");//final state raase akhar bashad

            temp = rex_transition_graph.right.key.Transition_Graph.Edges;
            rex_transition_graph.right.key.Transition_Graph.Edges = rex_transition_graph.right.key.Transition_Graph.Edges.nil.next;
            while (rex_transition_graph.right.key.Transition_Graph.Edges.List_Length == 0)
            {
                AdjL[rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.begin - 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.begin - 1, "q" + (rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.begin - 1).ToString(), rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.end - 1, "q" + (rex_transition_graph.left.key.Transition_Graph.V + rex_transition_graph.right.key.Transition_Graph.Edges.key.end - 1).ToString(), rex_transition_graph.right.key.Transition_Graph.Edges.key.Alphabet);
                rex_transition_graph.right.key.Transition_Graph.Edges = rex_transition_graph.right.key.Transition_Graph.Edges.next;
            }
            rex_transition_graph.right.key.Transition_Graph.Edges = temp;
            rex_transition_graph.key.Transition_Graph = G;
            //}
            //else if (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 1 || (rex_transition_graph.left.key.Value.AdjLHandle[0].degree == 2 && regular_expression_body.left.key.Key == Regular_Expression_Operator.Star))
            //{//bedune Lambda vaghti ke raase avval graph chap darajeye yek bashad ya graph chap closure bashad va darajeye an 2 bashad
            //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1);
            //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1];
            //    G.V = rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1;
            //    for (int i = 0; i < rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1; i++)
            //        AdjL[i] = new Graph_Adjacency_List<System.String>(rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V - 1);

            //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
            //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
            //    {
            //        AdjL[rex_transition_graph.left.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.Edges.key.begin, rex_transition_graph.left.key.Value.Edges.key.end, "q" + rex_transition_graph.left.key.Value.Edges.key.end, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.left.key.Value.Edges = temp;

            //    AdjL[rex_transition_graph.left.key.Value.V - 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V - 1, "q" + rex_transition_graph.left.key.Value.V - 1, rex_transition_graph.left.key.Value.V, "q" + rex_transition_graph.left.key.Value.V, "Lambda");//final state raase akhar bashad

            //    temp = rex_transition_graph.right.key.Value.Edges;
            //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
            //    {
            //        if (rex_transition_graph.right.key.Value.Edges.key.begin != 0)
            //            AdjL[rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.right.key.Value.Edges = temp;
            //}
            //else
            //{//halate addi
            //    //tak tak yal haye graph ghabli  ra be graph jadidi ezafe mikonim
            //    //rex_transition_graph.right.key.Value;
            //    Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
            //    Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V];
            //    G.V = 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V;
            //    for (int i = 0; i < 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V; i++)
            //        AdjL[i] = new Graph_Adjacency_List<System.String>(2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V);
            //    AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", regular_expression_body.key.Value);
            //    Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Value.Edges;
            //    rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.left.key.Value.Edges.List_Length == 0)
            //    {
            //        AdjL[rex_transition_graph.left.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.begin + 1, rex_transition_graph.left.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.left.key.Value.Edges.key.end + 1, rex_transition_graph.left.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.left.key.Value.Edges = rex_transition_graph.left.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.left.key.Value.Edges = temp;

            //    AdjL[rex_transition_graph.left.key.Value.V + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + 1, "q" + rex_transition_graph.left.key.Value.V + 1, rex_transition_graph.left.key.Value.V + 2, "q" + rex_transition_graph.left.key.Value.V + 2, "Lambda");//final state raase akhar bashad

            //    temp = rex_transition_graph.right.key.Value.Edges;
            //    rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.nil.next;
            //    while (rex_transition_graph.right.key.Value.Edges.List_Length == 0)
            //    {
            //        AdjL[rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin + 1, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.begin + 1, rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end + 1, "q" + rex_transition_graph.left.key.Value.V + rex_transition_graph.right.key.Value.Edges.key.end + 1, rex_transition_graph.right.key.Value.Edges.key.Alphabet);
            //        rex_transition_graph.right.key.Value.Edges = rex_transition_graph.right.key.Value.Edges.next;
            //    }
            //    rex_transition_graph.right.key.Value.Edges = temp;

            //    AdjL[1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V].List_Insert(G, AdjL, 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 1 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "q" + 2 + rex_transition_graph.right.key.Value.V + rex_transition_graph.left.key.Value.V, "Lambda");
            //}
        }
        private static void Star_Operation_In_Rex_Graph(Threaded_Tree<Regular_Expression> rex_transition_graph)
        {
            if (rex_transition_graph.left.key.Transition_Graph.V == 2)
            {//bedune Lambda vaghti ke raase avval graph rast darajeye yek bashad ya graph rast closure bashad va darajeye an 2 bashad
                Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2);
                Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2];
                G.V = 2;
                for (int i = 0; i < 2; i++)
                    AdjL[i] = new Graph_Adjacency_List<System.String>(2);
                AdjL[0].List_Insert(G, AdjL, 0, "q0", 0, "q0", rex_transition_graph.left.key.Transition_Graph.Edges.nil.next.key.Alphabet);
                AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", "Lambda");
                rex_transition_graph.key.Transition_Graph = G;
            }
            else
            {//halate addi
                //tak tak yal haye graph ghabli  ra be graph jadidi ezafe mikonim
                //rex_transition_graph.right.key.Value;
                Graph<System.String> G = new Graph<System.String>(true, false, false, true, 2 + rex_transition_graph.left.key.Transition_Graph.V);
                Graph_Adjacency_List<System.String>[] AdjL = new Graph_Adjacency_List<System.String>[2 + rex_transition_graph.left.key.Transition_Graph.V];
                G.V = 2 + rex_transition_graph.left.key.Transition_Graph.V;
                for (int i = 0; i < 2 + rex_transition_graph.left.key.Transition_Graph.V; i++)
                    AdjL[i] = new Graph_Adjacency_List<System.String>(2 + rex_transition_graph.left.key.Transition_Graph.V);
                AdjL[0].List_Insert(G, AdjL, 0, "q0", 1, "q1", "Lambda");
                Circular_Doubly_Linked_List<Graph_Edge> temp = rex_transition_graph.left.key.Transition_Graph.Edges;
                rex_transition_graph.left.key.Transition_Graph.Edges = rex_transition_graph.left.key.Transition_Graph.Edges.nil.next;
                while (rex_transition_graph.left.key.Transition_Graph.Edges.List_Length == 0)
                {
                    AdjL[rex_transition_graph.left.key.Transition_Graph.Edges.key.begin + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.Edges.key.begin + 1, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.begin + 1, rex_transition_graph.left.key.Transition_Graph.Edges.key.end + 1, "q" + rex_transition_graph.left.key.Transition_Graph.Edges.key.end + 1, rex_transition_graph.left.key.Transition_Graph.Edges.key.Alphabet);
                    rex_transition_graph.left.key.Transition_Graph.Edges = rex_transition_graph.left.key.Transition_Graph.Edges.next;
                }
                rex_transition_graph.left.key.Transition_Graph.Edges = temp;
                //final state raase akhar bashad

                AdjL[rex_transition_graph.left.key.Transition_Graph.V].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.V, "q" + rex_transition_graph.left.key.Transition_Graph.V, 1 + rex_transition_graph.left.key.Transition_Graph.V, "q" + 1 + rex_transition_graph.left.key.Transition_Graph.V, "Lambda");
                AdjL[0].List_Insert(G, AdjL, 0, "q0", 1 + rex_transition_graph.left.key.Transition_Graph.V, "q" + 1 + rex_transition_graph.left.key.Transition_Graph.V, "Lambda");
                AdjL[rex_transition_graph.left.key.Transition_Graph.V + 1].List_Insert(G, AdjL, rex_transition_graph.left.key.Transition_Graph.V + 1, "q" + rex_transition_graph.left.key.Transition_Graph.V + 1, 0, "q0", "Lambda");
                rex_transition_graph.key.Transition_Graph = G;
            }

        }
        public Regular_Expression Regular_Expression_Homomorphic_Image(Regular_Expression Rex, Key_Value_Pair<Regular_Expression, Regular_Expression>[] Homomorphic_Function)
        {
            Circular_Doubly_Linked_List<Threaded_Tree<Regular_Expression>> changing_Statement_Occurences = new Circular_Doubly_Linked_List<Threaded_Tree<Regular_Expression>>();
            //Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>>> changing_Statement_Occurences_tg = new Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>>>();
            Threaded_Tree<Regular_Expression> x = Rex.Regular_Expression_Body;
            //Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>> y = Rex.Rex_Transition_Graph;
            x = Rex.Regular_Expression_Body.Tree_Inorder_Successor(x);
            while (x.root == Threaded_Tree<Regular_Expression>.nil)
            {
                for (int i = 0; i < Homomorphic_Function.Length; i++)
                    if (Rex.Regular_Expression_Body.Tree_Equal(Homomorphic_Function[i].Key.Regular_Expression_Body.root, x))
                    {
                        changing_Statement_Occurences.List_Insert(x);
                        break;
                    }
                x = Rex.Regular_Expression_Body.Tree_Inorder_Successor(x);
            }
            Circular_Doubly_Linked_List<Threaded_Tree<Regular_Expression>> temp = changing_Statement_Occurences;
            //Circular_Doubly_Linked_List<Threaded_Tree<Key_Value_Pair<Regular_Expression_Operator, Graph<string>>>> temptg = changing_Statement_Occurences_tg;
            changing_Statement_Occurences = changing_Statement_Occurences.nil.next;
            //changing_Statement_Occurences_tg = changing_Statement_Occurences_tg.nil.next;
            while (changing_Statement_Occurences.key != null)
            {
                if (changing_Statement_Occurences.key.p.right == changing_Statement_Occurences.key)
                {
                    for (int i = 0; i < Homomorphic_Function.Length; i++)
                        if (Homomorphic_Function[i].Key.Regular_Expression_Body.Tree_Equal(Homomorphic_Function[i].Key.Regular_Expression_Body.root, changing_Statement_Occurences.key))
                        {
                            //changing_Statement_Occurences.key.DeleteRight(changing_Statement_Occurences.key.p, Homomorphic_Function[i].Key.Regular_Expression_Body.root);
                            changing_Statement_Occurences.key.Insert_SubTree_Right(changing_Statement_Occurences.key.p, Homomorphic_Function[i].Value.Regular_Expression_Body.root);
                            //changing_Statement_Occurences_tg.key.Insert_SubTree_Right(changing_Statement_Occurences_tg.key.p, Homomorphic_Function[i].Value.Rex_Transition_Graph.root);
                            break;
                        }
                }
                else
                {
                    if (changing_Statement_Occurences.key.p.left == changing_Statement_Occurences.key)
                        for (int j = 0; j < Homomorphic_Function.Length; j++)
                            if (Homomorphic_Function[j].Key.Regular_Expression_Body.Tree_Equal(Homomorphic_Function[j].Key.Regular_Expression_Body.root, changing_Statement_Occurences.key))
                            {
                                //changing_Statement_Occurences.key.DeleteLeft(changing_Statement_Occurences.key.p, Homomorphic_Function[j].Key.Regular_Expression_Body.root);
                                changing_Statement_Occurences.key.Insert_SubTree_Left(changing_Statement_Occurences.key.p, Homomorphic_Function[j].Value.Regular_Expression_Body.root);
                                //changing_Statement_Occurences_tg.key.Insert_SubTree_Left(changing_Statement_Occurences_tg.key.p, Homomorphic_Function[j].Value.Rex_Transition_Graph.root);
                                break;
                            }
                }
                changing_Statement_Occurences = changing_Statement_Occurences.next;
                //changing_Statement_Occurences_tg = changing_Statement_Occurences_tg.next;
            }
            changing_Statement_Occurences = temp;
            //changing_Statement_Occurences_tg = temptg;
            return Rex;
        }
        public void Leaf_Position_Maker(Threaded_Tree<Regular_Expression> regular_expression_body,ref int Initial_Position)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Leaf_Position_Maker(regular_expression_body.left,ref Initial_Position);
                if (regular_expression_body.key.Operator == Regular_Expression_Operator.Alphabet)
                    regular_expression_body.key.Leaf_Position = Initial_Position++;
                Leaf_Position_Maker(regular_expression_body.right,ref Initial_Position);
            }
        }
        public void Nullable_Finder(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Nullable_Finder(regular_expression_body.left);
                Nullable_Finder(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        regular_expression_body.key.Nullable = true;
                        break;
                    case Regular_Expression_Operator.Point:
                        regular_expression_body.key.Nullable = regular_expression_body.right.key.Nullable && regular_expression_body.left.key.Nullable;
                        break;
                    case Regular_Expression_Operator.Plus:
                        regular_expression_body.key.Nullable = regular_expression_body.right.key.Nullable || regular_expression_body.left.key.Nullable;
                        break;
                    case Regular_Expression_Operator.Alphabet:
                        if (regular_expression_body.key.Alphabet == "Lambda")
                            regular_expression_body.key.Nullable = true;
                        else
                            regular_expression_body.key.Nullable = false;
                        break;
                }
            }
            return;
        }
        public void Firstpos_Finder(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Firstpos_Finder(regular_expression_body.left);
                Firstpos_Finder(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        regular_expression_body.key.Firstpos = regular_expression_body.left.key.Firstpos.Copy(regular_expression_body.left.key.Firstpos);
                        break;
                    case Regular_Expression_Operator.Point:
                        if (regular_expression_body.left.key.Nullable)
                            regular_expression_body.key.Firstpos = regular_expression_body.right.key.Firstpos.List_Concatation(regular_expression_body.left.key.Firstpos, regular_expression_body.right.key.Firstpos);
                        else
                            regular_expression_body.key.Firstpos = regular_expression_body.left.key.Firstpos.Copy(regular_expression_body.left.key.Firstpos);
                        break;
                    case Regular_Expression_Operator.Plus:
                        regular_expression_body.key.Firstpos = regular_expression_body.right.key.Firstpos.List_Concatation(regular_expression_body.left.key.Firstpos, regular_expression_body.right.key.Firstpos);
                        break;
                    case Regular_Expression_Operator.Alphabet:
                        if (regular_expression_body.key.Alphabet == "Lambda")
                            regular_expression_body.key.Firstpos = new Circular_Doubly_Linked_List<int>();
                        else
                        {
                            regular_expression_body.key.Firstpos = new Circular_Doubly_Linked_List<int>();
                            regular_expression_body.key.Firstpos.List_Insert(regular_expression_body.key.Leaf_Position);
                        }
                        break;
                }
            }
            return;
        }
        public void Lastpos_Finder(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Lastpos_Finder(regular_expression_body.left);
                Lastpos_Finder(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        regular_expression_body.key.Lastpos = regular_expression_body.left.key.Lastpos;
                        break;
                    case Regular_Expression_Operator.Point:
                        if (regular_expression_body.right.key.Nullable)
                            regular_expression_body.key.Lastpos = regular_expression_body.right.key.Lastpos.List_Concatation(regular_expression_body.left.key.Lastpos, regular_expression_body.right.key.Lastpos);
                        else
                            regular_expression_body.key.Lastpos = regular_expression_body.right.key.Lastpos.Copy(regular_expression_body.right.key.Lastpos);
                        break;
                    case Regular_Expression_Operator.Plus:
                        regular_expression_body.key.Lastpos = regular_expression_body.right.key.Lastpos.List_Concatation(regular_expression_body.left.key.Lastpos, regular_expression_body.right.key.Lastpos);
                        break;
                    case Regular_Expression_Operator.Alphabet:
                        if (regular_expression_body.key.Alphabet == "Lambda")
                            regular_expression_body.key.Lastpos = new Circular_Doubly_Linked_List<int>();
                        else
                        {
                            regular_expression_body.key.Lastpos = new Circular_Doubly_Linked_List<int>();
                            regular_expression_body.key.Lastpos.List_Insert(regular_expression_body.key.Leaf_Position);
                        }
                        break;
                }
            }
            return;
        }
        public void Followpos_Finder(Threaded_Tree<Regular_Expression> regular_expression_body)
        {
            if (regular_expression_body.right != null && regular_expression_body.left != null && regular_expression_body.key != null)
            {
                Followpos_Finder(regular_expression_body.left);
                Followpos_Finder(regular_expression_body.right);
                switch (regular_expression_body.key.Operator)
                {
                    case Regular_Expression_Operator.Star:
                        Circular_Doubly_Linked_List<int> temp = regular_expression_body.left.key.Lastpos;
                        temp = temp.nil.next;
                        while (temp.List_Length == 0)
                        {
                            Regular_Expression Searching_Rex = new Regular_Expression();
                            Searching_Rex.Leaf_Position = temp.key;
                            Threaded_Tree<Regular_Expression> Result = regular_expression_body.Tree_Search(this.Regular_Expression_Body, Searching_Rex);
                            if (Result != null)
                            {
                                Searching_Rex = Result.key;
                                Searching_Rex.Followpos = Searching_Rex.Followpos.List_Concatation(Searching_Rex.Followpos, regular_expression_body.left.key.Firstpos.Copy(regular_expression_body.left.key.Firstpos));
                            }
                            temp = temp.next;
                        }
                        break;
                    case Regular_Expression_Operator.Point:
                        temp = regular_expression_body.left.key.Lastpos;
                        temp = temp.nil.next;
                        while (temp.List_Length == 0)
                        {
                            Regular_Expression Searching_Rex = new Regular_Expression();
                            Searching_Rex.Leaf_Position = temp.key;
                            Threaded_Tree<Regular_Expression> Result = regular_expression_body.Tree_Search(this.Regular_Expression_Body, Searching_Rex);
                            if (Result != null)
                            {
                                Searching_Rex = Result.key;
                                Searching_Rex.Followpos = Searching_Rex.Followpos.List_Concatation(Searching_Rex.Followpos, regular_expression_body.right.key.Firstpos.Copy(regular_expression_body.right.key.Firstpos));
                            }
                            temp = temp.next;
                        }
                        break;
                }
            }
            return;
        }
        #region IComparable Members

        public int CompareTo(object obj)
        {
            Regular_Expression obj1 = (Regular_Expression)obj;
            if (obj1.Leaf_Position == Leaf_Position )
                return 0;
            else if (obj1.Leaf_Position > Leaf_Position)
                return -1;
            else
                return 1;
        }

        #endregion
        #region ICloneable Members

        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion
    }
}
 